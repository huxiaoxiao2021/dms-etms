<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util" xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
    http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd">

	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:configured/*.properties</value>
				<value>classpath:configured/important.properties</value>
			</list>
		</property>
	</bean>
	
	<import resource="classpath:spring/mysql/distribution-core-datasource-backup.xml"/>
	
	<bean id="parentDataSource" class="org.apache.commons.dbcp.BasicDataSource" abstract="true">
	    <property name="driverClassName" value="${db.mysql.driverClassName}"/>
		<property name="defaultAutoCommit" value="true"/>
		<property name="initialSize" value="${db.initialSize}"/>
		<property name="maxIdle" value="${db.maxIdle}"/>
		<property name="minIdle" value="${db.minIdle}"/>
		<property name="maxActive" value="${db.maxActive}"/>
		<property name="maxWait" value="${db.maxWait}"/>
		<property name="minEvictableIdleTimeMillis" value="${db.minEvictableIdleTimeMillis}"/>
		<property name="timeBetweenEvictionRunsMillis" value="${db.timeBetweenEvictionRunsMillis}"/>
		<property name="poolPreparedStatements" value="false" />
	</bean>
	
	<bean id="centerDataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${wss.dataSource.driverClassName}"/>
		<property name="url" value="${wss.dataSource.new.url}"/>
		<property name="username" value="${wss.dataSource.username}"/>
		<property name="password" value="${wss.dataSource.password}"/>
		<property name="defaultAutoCommit" value="${wss.dataSource.defaultAutoCommit}" />
		<property name="maxActive" value="${wss.dataSource.maxActive}" />
		<property name="maxIdle" value="${wss.dataSource.maxIdle}" />
		<property name="maxWait" value="${wss.dataSource.maxWait}" />
		<property name="initialSize" value="${wss.dataSource.initialSize}" />
		<property name="minIdle" value="${wss.dataSource.minIdle}" />
		<property name="minEvictableIdleTimeMillis" value="${wss.dataSource.minEvictableIdleTimeMillis}" />
		<property name="timeBetweenEvictionRunsMillis" value="${wss.dataSource.timeBetweenEvictionRunsMillis}" />
	</bean>	
	
	<bean id="dms_main" parent="parentDataSource">
	    <property name="url" value="${db.mysql.url}"/>
	    <property name="username" value="${db.mysql.username}" />
		<property name="password" value="${db.mysql.password}" />
	</bean>
	
	<bean id="dmsReadDataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${dms.read.mysql.db.driverClassName}"/>
		<property name="url" value="${dms.read.mysql.db.url}"/>
		<property name="username" value="${dms.read.mysql.db.username}"/>
		<property name="password" value="${dms.read.mysql.db.password}"/>
		<property name="defaultAutoCommit" value="${dms.read.db.defaultAutoCommit}" />
		<property name="maxActive" value="${dms.read.db.maxActive}" />
		<property name="maxIdle" value="${dms.read.db.maxIdle}" />
		<property name="maxWait" value="${dms.read.db.maxWait}" />
		<property name="initialSize" value="${dms.read.db.initialSize}" />
		<property name="minIdle" value="${dms.read.db.minIdle}" />
		<property name="minEvictableIdleTimeMillis" value="${dms.read.db.minEvictableIdleTimeMillis}" />
		<property name="timeBetweenEvictionRunsMillis" value="${dms.read.db.timeBetweenEvictionRunsMillis}" />
	</bean>

    <!-- 数据库双写主数据源配置  王进思  开始 -->
    <!--<bean id="dmsMainSequenceDataSource" class="com.jd.ql.framework.ddf.jdbc.sequence.SequenceDataSource">-->
        <!--<constructor-arg index="0">-->
            <!--<bean class="com.jd.ql.framework.idgenerator.support.DdfSequenceGenerator">-->
                <!--<property name="jsfAlias" value="${sequenceService.alias}"/>-->
                <!--<property name="jsfTimeout" value="${sequenceService.timeout}"/>-->
            <!--</bean>-->
        <!--</constructor-arg>-->
        <!--<constructor-arg index="1" ref="dms_main"/>-->
    <!--</bean>-->


    <!--<bean id="mainWriteSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">-->
		<!--<property name="dataSource" ref="dmsMainSequenceDataSource" />-->
		<!--<property name="configLocation" value="classpath:config/mysql/mybatis-config.xml" />-->
	<!--</bean>-->

	<!--<bean id="mainWriteReplicationSqlSessionFactory" class="com.jd.ql.framework.migration.replication.transaction.ReplicationSqlSessionFactory">-->
		<!--<constructor-arg index="0" ref="mainWriteSessionFactory"/>-->
		<!--<property name="enable" value="${db.backup.replicate.enable}" />-->
		<!--<property name="statementDecider">-->
			<!--<bean class="com.jd.bluedragon.common.dao.migration.DmsBackupDataSourceStatementDecider" />-->
		<!--</property>-->
		<!--<property name="statementProcessor" ref="backupWriteDataSourceDbStatementProcessor" />-->
		<!--<property name="ignoreExceptionWhenReplication" value="${db.backup.replicate.ignoreExp}" />-->
		<!--<property name="excludedStatements">-->
			<!--<list>-->
				<!--<value>com.jd.bluedragon.distribution.operationLog.dao.OperationLogDao.add</value>-->
				<!--<value>com.jd.bluedragon.distribution.systemLog.dao.SystemLogDao.add</value>-->
			<!--</list>-->
		<!--</property>-->
	<!--</bean>-->

    <!--<bean id="transactionManager"-->
          <!--class="org.springframework.jdbc.datasource.DataSourceTransactionManager">-->
        <!--<property name="dataSource" ref="dms_main" />-->
        <!--<qualifier value="main"></qualifier>-->
    <!--</bean>-->

    <!--<tx:annotation-driven transaction-manager="transactionManager"/>-->

	<!--<bean id="sessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">-->
		<!--<constructor-arg index="0" ref="mainWriteReplicationSqlSessionFactory" />-->
	<!--</bean>-->

    <!-- 数据库双写主数据源配置  王进思  结束 -->





    <!-- 数据库双写主数据源配置  赵玉开  开始 -->

    <bean id="sqlSessionFactoryMaster" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dms_main" />
        <property name="configLocation" value="classpath:config/mysql/mybatis-config.xml" />
    </bean>

    <bean id="dwSqlSessionFactory" class="com.jd.coo.sa.mybatis.plugins.dwr.SqlSessionFactoryBean">
        <property name="masterSqlSessionFactory" ref="sqlSessionFactoryMaster"/>
        <property name="daoContext" ref="daoContext"/>
    </bean>

    <bean class="com.jd.coo.sa.mybatis.plugins.dwr.ContextWithTransaction" name="daoContext">
        <property name="swallowException" value="false"/>
        <property name="slaveSqlSessionFactory" ref="sqlSessionFactorySlave"/>
        <property name="slaveTransactionManager" ref="transactionManagerSlave"/>
        <!-- set transaction isolation level as read-committed -->
        <property name="slaveTransactionIsolationLevel" value="2"/>

        <!-- 设置指定sqlId在master mybatis中存在而在slave中不存在 -->
        <property name="knownMissingSqlIds">
            <list>
                <value>com.jd.bluedragon.distribution.operationLog.dao.OperationLogDao.add</value>
                <value>com.jd.bluedragon.distribution.systemLog.dao.SystemLogDao.add</value>
                <value>com.jd.bluedragon.distribution.failqueue.dao.TaskFailQueueDao.add</value>
                <value>com.jd.bluedragon.distribution.failqueue.dao.TaskFailQueueDao.update</value>
                <value>com.jd.bluedragon.distribution.failqueue.dao.TaskFailQueueDao.updateFail</value>
                <value>com.jd.bluedragon.distribution.failqueue.dao.TaskFailQueueDao.updateSuccess</value>
                <value>com.jd.bluedragon.distribution.failqueue.dao.TaskFailQueueDao.updateLock</value>
                <value>com.jd.bluedragon.distribution.task.dao.TaskDao.add</value>
                <value>com.jd.bluedragon.distribution.task.dao.TaskDao.update</value>
                <value>com.jd.bluedragon.distribution.task.dao.TaskDao.addWithStatus</value>
                <value>com.jd.bluedragon.distribution.task.dao.TaskDao.updateTaskById</value>
                <value>com.jd.bluedragon.distribution.task.dao.TaskDao.updateBatchTask</value>
                <value>com.jd.bluedragon.distribution.task.dao.TaskDao.updateTaskStatus</value>
                <value>com.jd.bluedragon.distribution.globaltrade.dao.updateLoadBillStatus</value>
                <value>com.jd.bluedragon.distribution.globaltrade.dao.add</value>
                <value>com.jd.bluedragon.distribution.globaltrade.dao.update</value>
                <value>com.jd.bluedragon.distribution.globaltrade.dao.updatePreLoadBillById</value>
                <value>com.jd.bluedragon.distribution.globaltrade.dao.updateCancelLoadBillStatus</value>
            </list>
        </property>

        <!-- 启动异步双写配置 -->
        <property name="enableAsync" value="true"/>
        <property name="taskExecutor" ref="doubleWriteExecutor"/>
        <!-- 启动异步双写结束 -->
    </bean>
    <!--异步双写线程池配置, 线上注意配置线程池大小 pool-size属性-->
    <task:executor id="doubleWriteExecutor" pool-size="0-15"/>

    <bean name="transactionManager" class="com.jd.coo.sa.mybatis.plugins.dwr.TransactionManager">
        <!--class="org.springframework.jdbc.datasource.DataSourceTransactionManager">-->
        <property name="daoContext" ref="daoContext"/>
        <property name="dataSource" ref="dms_main" />
        <property name="rollbackOnCommitFailure" value="true" />
        <qualifier value="main"></qualifier>
    </bean>

    <!--    <bean id="transactionManager"
              class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
            <property name="dataSource" ref="dms_main"/>
            <qualifier value="main"></qualifier>
        </bean>
    -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <bean id="sessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="dwSqlSessionFactory"/>
    </bean>

    <!-- 数据库双写主数据源配置  赵玉开  结束 -->


    <!-- dms读库 数据源  -start-->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dmsReadDataSource" />
		<property name="configLocation" value="classpath:config/mysql/mybatis-config-read.xml" />
	</bean>
	
	
	<bean id="readSqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>
	
	<!-- dms读库 数据源  -end-->

    <!-- worker配置数据源    -start-->
    
   <bean id="taskDataSource" parent="parentDataSource">
	    <property name="url" value="${mysqlTaskDb.url}"/>
	    <property name="username" value="${mysqlTaskDb.username}" />
		<property name="password" value="${mysqlTaskDb.password}" />
	</bean>

	<bean id="mysqlTaskDataTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="taskDataSource" />
		<qualifier value="worker"></qualifier>
	</bean>
	
    <bean id="workerSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="taskDataSource" />
        <property name="configLocation" value="classpath:config/mysql/mybatis-config-worker.xml" />
    </bean>

    <bean id="workerSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="workerSessionFactory" />
    </bean>
    <!-- worker配置 数据源    -end-->

	<!--<bean class="com.jd.bluedragon.core.objectid.DbsGenerateObjectId" id="genObjectId">-->
		<!--<property name="dataSource" ref="dmsMainSequenceDataSource"/>-->
    <!--</bean>-->


    <!-- 箱号生成序列号服务 -->
    <bean id="objectIdService" class="com.jd.bluedragon.distribution.dbs.service.ObjectIdServiceImpl">
    </bean>
    <bean class="com.jd.bluedragon.core.objectid.DbsGenerateObjectId" id="genObjectId">
        <property name="objectIdService" ref="objectIdService"/>
    </bean>


	<bean id="baseSetConfig" class="com.jd.bluedragon.distribution.base.domain.BaseSetConfig">
		<property name="erroral">
			<list>
				<value>110</value>
				<value>120</value>
				<value>130</value>
				<value>140</value>
			</list>
		</property>
		<property name="sitetype" value="18" />
		<property name="capacityType">
			<list>
				<value>7030</value>
				<value>7031</value>
				<value>7032</value>
			</list>
		</property>
	</bean>
	
	<!-- new vts baseSetConfig -->
	<bean id="vtsBaseSetConfig" class="com.jd.bluedragon.distribution.base.domain.VtsBaseSetConfig">
		<property name="erroral">
			<list>
				<value>110</value>
				<value>120</value>
				<value>130</value>
				<value>140</value>
			</list>
		</property>
		<property name="sitetype" value="18" />
		<property name="capacityType">
			<list>
				<value>1011</value>
				<value>1004</value>
				<value>1001</value>
			</list>
		</property>
	</bean>
	
	<!-- ump monitor begin common-->
	<!-- aop动态代理 --> 
	<aop:aspectj-autoproxy proxy-target-class="true"/>
	<!--  监控注解处理器 已放到具体的应用中web\worker contex.xml中进行区分 -->
	<!--bean class="com.jd.ump.annotation.JAnnotation">
	   <property name="jvmKey" value="Bluedragon_dms_center.jvm.common"></property>
	   <property name="systemKey" value="Bluedragon_dms_center.system.common"></property>
	</bean-->
	<!-- ump monitor end common-->

</beans>