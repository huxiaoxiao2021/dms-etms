<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 


    http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.1.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd">

	<bean id="propertyConfigurer"
		  class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="ignoreUnresolvablePlaceholders" value="true" />
		<property name="locations">
			<list>
				<value>classpath:authen.properties</value>
				<value>classpath:configured/app.properties</value>
				<value>classpath:configured/db.properties</value>
				<value>classpath:configured/dms_ip_mapper.properties</value>
				<value>classpath:configured/jsf.properties</value>
				<value>classpath:configured/print.properties</value>
				<value>classpath:configured/mq.properties</value>
				<value>classpath:configured/order_service_config.properties</value>
				<value>classpath:configured/popabnormal.properties</value>
				<value>classpath:configured/snowflake.properties</value>
				<value>classpath:configured/ucc.properties</value>
			</list>
		</property>
		<property name="properties" ref="secApplicationProperties"/>
	</bean>
		<!--公司安全要求 importants文件未防止运行环境泄露 应用secsdk加密-->
	<bean id ="secApplicationProperties" class="com.jd.security.configsec.spring.config.JDSecurityPropertyFactoryBean">
		<property name="ignoreResourceNotFound" value="true" />
		<property name="secLocation" value="classpath:configured/important.properties"/>
	</bean>
	<context:component-scan base-package="com.jd.bluedragon.distribution.test.print" />
	<import resource="classpath:ql-dms-print-engine.xml"/> 
	<!-- pdf本地生成service配置 -->
	<bean id="jdCloudPrintService" class="com.jd.bluedragon.distribution.print.service.JdCloudPrintServiceImpl">
		<property name="useJdCloudPrint" value="${beans.jdCloudPrintService.useJdCloudPrint}"/>
	</bean>
	<!-- pdf本地生成service配置 -->
	<bean id="localPrintService" class="com.jd.bluedragon.distribution.print.service.JdCloudPrintServiceImpl">
		<property name="useJdCloudPrint" value="${beans.localPrintService.useJdCloudPrint}"/>
	</bean>
	<bean id="pdfPrintOssConfig" class="com.jd.bluedragon.distribution.print.domain.JdCloudPrintOssConfig">
		<property name="accessKey" value = "${print.out.config.jss.accessKey}"/>
		<property name="secretKey" value = "${print.out.config.jss.secretKey}"/>
		<property name="endpoint" value = "${print.out.config.jss.endpoint}"/>
		<property name="bucket" value = "${print.out.config.jss.pdfBucket}"/>
		<property name="socketTimeout" value = "${print.out.config.jss.socketTimeout}"/>
	</bean>
    <bean id="pdfPrintAmazonConfig" class="com.jd.bluedragon.distribution.print.domain.JdCloudPrintOssConfig">
        <property name="accessKey" value = "${oss.dmsweb.accessKey}"/>
        <property name="secretKey" value = "${oss.dmsweb.secretKey}"/>
        <property name="endpoint" value = "${oss.dmsweb.endpointHttps}"/>
        <property name="bucket" value = "${oss.dmsweb.bucketName}"/>
        <property name="socketTimeout" value = "${oss.dmsweb.socketTimeout}"/>
    </bean> 	
	<bean id="pdfOutJssClientConfig" class="com.jd.jss.client.ClientConfig">
        <property name="connectionTimeout" value="${jss.connectionTimeout}"/>
        <property name="socketTimeout" value="${print.out.config.jss.socketTimeout}"/>
        <property name="endpoint" value="${print.out.config.jss.endpoint}"/>
    </bean>
	<bean id="pdfOutJssCredential" class="com.jd.jss.Credential">
        <constructor-arg index="0" value="${print.out.config.jss.accessKey}"/>
        <constructor-arg index="1" value="${print.out.config.jss.secretKey}"/>
    </bean>
    <bean id="pdfOutJssStorage" class="com.jd.jss.JingdongStorageService" depends-on="pdfOutJssCredential,pdfOutJssClientConfig">
        <constructor-arg index="0" ref="pdfOutJssCredential" />
        <constructor-arg index="1" ref="pdfOutJssClientConfig" />
    </bean>
    <!-- 云oss -->
    <bean id="dmswebAmazonS3ClientWrapper" class="com.jd.bluedragon.distribution.jss.oss.AmazonS3ClientWrapper">
       <property name="accessKey" value="${oss.dmsweb.accessKey}"/>
       <property name="secretKey" value="${oss.dmsweb.secretKey}"/>
       <property name="signingRegion" value="${oss.dmsweb.signingRegion}"/>
       <property name="endpoint" value="${oss.dmsweb.endpoint}"/>
       <property name="outerNetEndpoint" value="${oss.outerNetEndpoint}"/>
        <property name="bucketName" value="${oss.dmsweb.bucketName:dmsweb}"/>
       <property name="socketTimeout" value="${oss.dmsweb.socketTimeout:5000}"/>
       <property name="connectionTimeout" value="${oss.dmsweb.connectionTimeout:5000}"/>

    </bean>


    <bean id="labelprintAmazonS3ClientWrapper" class="com.jd.bluedragon.distribution.jss.oss.AmazonS3ClientWrapper">
        <property name="accessKey" value="${oss.labelprint.accessKey}"/>
        <property name="secretKey" value="${oss.labelprint.secretKey}"/>
        <property name="signingRegion" value="${oss.labelprint.signingRegion}"/>
        <property name="endpoint" value="${oss.outerNetEndpoint}"/>
        <property name="outerNetEndpoint" value="${oss.outerNetEndpoint}"/>
        <property name="bucketName" value="${oss.labelprint.bucketName:labelprint}"/>
        <property name="socketTimeout" value="${oss.labelprint.socketTimeout:5000}"/>
        <property name="connectionTimeout" value="${oss.labelprint.connectionTimeout:5000}"/>

    </bean>    
</beans>
