package com.jd.bluedragon.core.jsf.wlLbs.utils;

import com.alibaba.fastjson.JSONObject;
import com.vividsolutions.jts.geom.Geometry;
import com.vividsolutions.jts.io.WKTReader;
import org.geotools.geojson.geom.GeometryJSON;

import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.util.HashMap;
import java.util.Map;

/**
 * description
 *
 * @author fanggang7
 * @copyright jd.com 京东物流JDL
 * @time
 */

public class GeoUtils {

    /**
     * wkt转GeoJson包括属性值（feature）
     * @param wkt wkt
     * @param map 属性值
     * @return GeoJson
     */
    public static HashMap<Object, Object> wktToJson(String wkt, Map<String, Object> map) {
        String json = null;
        // geoJson
        HashMap<Object, Object> feature = new HashMap<>();
        try {
            WKTReader reader = new WKTReader();
            Geometry geometry = reader.read(wkt);
            StringWriter writer = new StringWriter();
            GeometryJSON g = new GeometryJSON();
            g.write(geometry, writer);
            JSONObject jsonObject = JSONObject.parseObject(writer.toString());
            feature.put("type", "Feature");
            feature.put("geometry", jsonObject);
            feature.put("properties", map);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return feature;
    }

    /**
     * wkt转GeoJson（geometry）  不包括属性
     * @param wkt wkt
     * @return geoJson
     */
    public static JSONObject wktToJson(String wkt) {
        JSONObject jsonObject = null;
        try {
            WKTReader reader = new WKTReader();
            Geometry geometry = reader.read(wkt);
            StringWriter writer = new StringWriter();
            GeometryJSON g = new GeometryJSON();
            g.write(geometry, writer);
            jsonObject = JSONObject.parseObject(writer.toString());
        } catch (Exception e) {
            e.printStackTrace();
        }
        return jsonObject;
    }

    public static String jsonToWkt(String geoJson) {
        String wkt = null;
        GeometryJSON gJson = new GeometryJSON();
        Reader reader = new StringReader(geoJson);
        try {
            Geometry geometry = gJson.read(reader);

            wkt = geometry.toText();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return wkt;
    }

    public static void main(String[] args) {
        String wkt = "POLYGON ((116.20561099999999 39.9215646018388, 116.20597915127586 39.92155572824015, 116.20634584934153 39.9215291424711, 116.20670964672647 39.921484949474085, 116.20706910741673 39.92142332369255, 116.20742281252652 39.92134450838198, 116.20776936590201 39.92124881464914, 116.20810739963514 39.92113662022337, 116.20843557946547 39.92100836796471, 116.20875261004919 39.92086456411493, 116.20905724007375 39.92070577629818, 116.2093482671984 39.92053263127937, 116.20962454280095 39.92034581248897, 116.20988497651209 39.92014605732412, 116.21012854051895 39.91993415423683, 116.21035427362156 39.91971093962054, 116.21056128502566 39.919477294507494, 116.21074875785705 39.919234141090165, 116.2109159523839 39.918982439080004, 116.2110622089338 39.91872318191855, 116.2111869504947 39.91845739285524, 116.21128968498894 39.91818612090796, 116.21137000721177 39.91791043672183, 116.21142760042666 39.91763142834307, 116.21146223761139 39.91735019692412, 116.21147378234956 39.917067852377414, 116.21146218936458 39.91678550899475, 116.21142750469394 39.91650428104958, 116.21136986550292 39.916225278399565, 116.2112894995388 39.91594960210679, 116.2111867242279 39.91567834009299, 116.2110619454187 39.91541256284662, 116.2109156557763 39.91515331919923, 116.21074843283465 39.9149016321871, 116.21056093671424 39.91465849501527, 116.2103539075142 39.91442486713898, 116.21012816238937 39.91420167047886, 116.2098845923236 39.91398978578399, 116.20962415861247 39.91379004915774, 116.20934788906878 39.91360324875975, 116.20905687396636 39.91343012169712, 116.20875226173777 39.91327135111713, 116.20843525444307 39.91312756351284, 116.20810710302753 39.91299932625222, 116.20776910238692 39.912887145340505, 116.20742258625972 39.91279146342461, 116.20706892196658 39.912712658047525, 116.20670950501764 39.912651040159346, 116.20634575360884 39.91260685289107, 116.20597910302908 39.9125802705958, 116.20561099999999 39.9125713981612, 116.20524289697092 39.9125802705958, 116.20487624639115 39.91260685289107, 116.20451249498235 39.912651040159346, 116.20415307803341 39.912712658047525, 116.20379941374027 39.91279146342461, 116.20345289761308 39.912887145340505, 116.20311489697247 39.91299932625222, 116.20278674555692 39.91312756351284, 116.20246973826222 39.91327135111713, 116.20216512603363 39.91343012169712, 116.20187411093121 39.91360324875975, 116.20159784138752 39.91379004915774, 116.20133740767639 39.91398978578399, 116.20109383761063 39.91420167047886, 116.20086809248579 39.91442486713898, 116.20066106328575 39.91465849501527, 116.20047356716535 39.9149016321871, 116.20030634422369 39.91515331919923, 116.20016005458129 39.91541256284662, 116.2000352757721 39.91567834009299, 116.1999325004612 39.91594960210679, 116.19985213449708 39.916225278399565, 116.19979449530605 39.91650428104958, 116.19975981063541 39.91678550899475, 116.19974821765044 39.917067852377414, 116.19975976238861 39.91735019692412, 116.19979439957334 39.91763142834307, 116.19985199278823 39.91791043672183, 116.19993231501105 39.91818612090796, 116.20003504950529 39.91845739285524, 116.2001597910662 39.91872318191855, 116.2003060476161 39.918982439080004, 116.20047324214295 39.919234141090165, 116.20066071497433 39.919477294507494, 116.20086772637843 39.91971093962054, 116.20109345948104 39.91993415423683, 116.20133702348791 39.92014605732412, 116.20159745719904 39.92034581248897, 116.2018737328016 39.92053263127937, 116.20216475992625 39.92070577629818, 116.2024693899508 39.92086456411493, 116.20278642053451 39.92100836796471, 116.20311460036486 39.92113662022337, 116.20345263409799 39.92124881464914, 116.20379918747348 39.92134450838198, 116.20415289258327 39.92142332369255, 116.20451235327353 39.921484949474085, 116.20487615065846 39.9215291424711, 116.20524284872414 39.92155572824015, 116.20561099999999 39.9215646018388))";
        JSONObject jsonObject = wktToJson(wkt);
        System.out.println(jsonObject);
    }

}

