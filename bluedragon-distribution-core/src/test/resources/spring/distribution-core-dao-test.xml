<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd

    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd" default-lazy-init="true">

 	<aop:aspectj-autoproxy/>

    <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="ignoreUnresolvablePlaceholders" value="true" />
        <property name="locations">
            <list>
                <value>classpath:configured/app.properties</value>
                <value>classpath:configured/db.properties</value>
                <value>classpath:configured/jsf.properties</value>
                <value>classpath:configured/mq.properties</value>
                <value>classpath:configured/snowflake.properties</value>
                <value>classpath:configured/ucc.properties</value>
                <value>classpath:configured/print.properties</value>
                <value>classpath:configured/kafka.properties</value>
                <value>classpath:configured/important.properties</value>
                <value>classpath:configured/sms.properties</value>
            </list>
        </property>
    </bean>

	<!--公司安全要求 importants文件未防止运行环境泄露 应用secsdk加密-->
<!--	<bean id="secApplicationProperties" class="com.jd.security.configsec.spring.config.JDSecurityPropertyFactoryBean">-->
<!--		<property name="ignoreResourceNotFound" value="true"/>-->
<!--		<property name="secLocation" value="classpath:configured/important.properties"/>-->
<!--	</bean>-->

	<bean class="org.springframework.context.annotation.CommonAnnotationBeanPostProcessor"/>

	<import resource="classpath:spring/distribution-core-datasource-jddl-test.xml" />
	<import resource="classpath:spring/distribution-core-datasource-task-config.xml" />
	<import resource="classpath:spring/distribution-core-datasource-undiv.xml" />
	<import resource="classpath:spring/distribution-core-datasource-loadunload.xml"/>
	<import resource="classpath:spring/distribution-core-datasource-task.xml" />
	<import resource="classpath:spring/distribution-core-dao.xml" />
	<import resource="classpath:spring/distribution-core-agg-dao-bak.xml" />
	<import resource="classpath:spring/distribution-core-agg-dao-main.xml" />
	<import resource="classpath:spring/distribution-core-redis.xml" />
	<import resource="classpath:spring/distribution-core-business.xml" />
	<import resource="classpath:spring/distribution-core-log.xml" />
	<import resource="classpath:spring/spring-ucc.xml" />
	<import resource="classpath:spring/distribution-core-sequence-gen.xml" />
	<import resource="classpath*:cdf/crossbow.comp" />
	<import resource="distribution-beans.xml" />
	<import resource="classpath:spring/distribution-core-datasource-waybill.xml" />

	<context:component-scan base-package="com.jd.bluedragon.distribution.popAbnormal.helper" />
	<context:component-scan base-package="com.jd.bluedragon.distribution.*.dao" />
	<context:component-scan base-package="com.jd.bluedragon.core.redis" />

	<bean id="springHelper" class="com.jd.bluedragon.utils.SpringHelper"></bean>
	<bean id="cacheAspect" class="com.jd.etms.framework.utils.cache.spring.CacheAspect">
		<property name="cluster" ref="redisClientCache"></property>
		<property name="keyGenerator" ref="keyGenerator"></property>
	</bean>
	<bean id="cacheMonitor" class="com.jd.etms.framework.utils.cache.monitor.DefaultCacheMonitor"></bean>
	<bean id="cacheKeyGeneratorScaner" class="com.jd.bluedragon.utils.CacheKeyGeneratorScaner">
		<property name="keyGenerator" ref="keyGenerator"></property>
	</bean>
	<bean id="keyGenerator" class="com.jd.bluedragon.utils.DmsArgsMatchCacheKeyGenerator"></bean>
    <!--以下两条注入是正向与逆向发货一单多件不全验证-->
    <bean id="forwardComputer" class="com.jd.bluedragon.distribution.send.service.DeliveryServiceImpl$ForwardSendDiffrence"></bean>
    <bean id="reverseComputer" class="com.jd.bluedragon.distribution.send.service.DeliveryServiceImpl$ReverseSendDiffrence"></bean>

    <bean class="com.jd.coo.sa.mybatis.plugins.id.SequenceGenAdaptor" id="sequenceGenAdaptor">
        <constructor-arg index="0">
            <bean class="com.jd.coo.sa.sequence.snowflake.impl.PropertiesFileSnowflakeSequenceGen">
               <constructor-arg index="0" value="/configured/snowflake.properties"/>
            </bean>
        </constructor-arg>
    </bean>
</beans>
