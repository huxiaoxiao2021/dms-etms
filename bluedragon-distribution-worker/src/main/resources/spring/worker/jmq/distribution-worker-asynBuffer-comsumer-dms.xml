<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jmq="http://code.jd.com/schema/jmq"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://code.jd.com/schema/jmq
	    http://code.jd.com/schema/jmq/jmq-1.1.xsd
	    http://www.springframework.org/schema/util
	    http://www.springframework.org/schema/util/spring-util.xsd">



    <!-- task任务处理器转为消费jmq消息配置 -->
    <!-- 全国环境 全部业务 -->

    <bean id="simpleTaskProcessorJMQRouter"
          class="com.jd.ql.framework.asynBuffer.comsumer.SimpleTaskProcessorJMQRouter">
        <constructor-arg name="mapping">
            <map>
                <!-- 分拣中心收货 -->
                <entry key="${jmq.task.topic.receive.dms}">
                    <bean class="com.jd.bluedragon.core.jmq.asynBuffer.PostStoredBeanProxyTaskProcessor"
                          autowire="byType">
                        <constructor-arg name="target" ref="asynBufferService"></constructor-arg>
                        <constructor-arg name="methodName" value="receiveTaskProcess"></constructor-arg>
                    </bean>
                </entry>


                <!-- 分拣中心验货 -->
                <entry key="${jmq.task.topic.inspection.dms}">
                    <bean class="com.jd.bluedragon.core.jmq.asynBuffer.PostStoredBeanProxyTaskProcessor"
                          autowire="byType">
                        <constructor-arg name="target" ref="asynBufferService"></constructor-arg>
                        <constructor-arg name="methodName" value="inspectionTaskProcess"></constructor-arg>
                    </bean>
                </entry>


                <!-- 处理运单号关联包裹任务 -->
                <entry key="${jmq.task.topic.partnerWaybill.dms}">
                    <bean class="com.jd.bluedragon.core.jmq.asynBuffer.PostStoredBeanProxyTaskProcessor"
                          autowire="byType">
                        <constructor-arg name="target" ref="asynBufferService"></constructor-arg>
                        <constructor-arg name="methodName" value="partnerWaybillTaskProcess"></constructor-arg>
                    </bean>
                </entry>


                <!-- 封签[封箱]异常任务 -->
                <entry key="${jmq.task.topic.shieldsBoxError.dms}">
                    <bean class="com.jd.bluedragon.core.jmq.asynBuffer.PostStoredBeanProxyTaskProcessor"
                          autowire="byType">
                        <constructor-arg name="target" ref="asynBufferService"></constructor-arg>
                        <constructor-arg name="methodName" value="shieldsBoxErrorTaskProcess"></constructor-arg>
                    </bean>
                </entry>


                <!-- 封签[封车]异常任务 -->
                <entry key="${jmq.task.topic.shieldsCarError.dms}">
                    <bean class="com.jd.bluedragon.core.jmq.asynBuffer.PostStoredBeanProxyTaskProcessor"
                          autowire="byType">
                        <constructor-arg name="target" ref="asynBufferService"></constructor-arg>
                        <constructor-arg name="methodName" value="shieldsCarErrorTaskProcess"></constructor-arg>
                    </bean>
                </entry>


                <!-- 运单号关联包裹回传 -->
                <entry key="${jmq.task.topic.partnerWaybillSynchro.dms}">
                    <bean class="com.jd.bluedragon.core.jmq.asynBuffer.PostStoredBeanProxyTaskProcessor"
                          autowire="byType">
                        <constructor-arg name="target" ref="asynBufferService"></constructor-arg>
                        <constructor-arg name="methodName" value="partnerWaybillSynchroTaskProcess"></constructor-arg>
                    </bean>
                </entry>


                <!-- 发货新老数据同步任务/中转发货补全任务/回传周转箱项目任务/发货回传运单状态任务-->
                <entry key="${jmq.task.topic.send.dms}">
                    <bean class="com.jd.bluedragon.core.jmq.asynBuffer.PostStoredBeanProxyTaskProcessor"
                          autowire="byType">
                        <constructor-arg name="target" ref="asynBufferService"></constructor-arg>
                        <constructor-arg name="methodName" value="taskSendProcess"></constructor-arg>
                    </bean>
                </entry>


                <!-- 支线发车推送运单任务-->
                <entry key="${jmq.task.topic.thirdDeparture.dms}">
                    <bean class="com.jd.bluedragon.core.jmq.asynBuffer.PostStoredBeanProxyTaskProcessor"
                          autowire="byType">
                        <constructor-arg name="target" ref="asynBufferService"></constructor-arg>
                        <constructor-arg name="methodName" value="thirdDepartureTaskProcess"></constructor-arg>
                    </bean>
                </entry>

                <!-- 封箱解封箱Redis任务-->
                <entry key="${jmq.task.topic.sealBox.dms}">
                    <bean class="com.jd.bluedragon.core.jmq.asynBuffer.PostStoredBeanProxyTaskProcessor"
                          autowire="byType">
                        <constructor-arg name="target" ref="asynBufferService"></constructor-arg>
                        <constructor-arg name="methodName" value="sealBoxTaskProcess"></constructor-arg>
                    </bean>
                </entry>


                <!-- 分拣退货Redis任务-->
                <entry key="${jmq.task.topic.sortingReturn.dms}">
                    <bean class="com.jd.bluedragon.core.jmq.asynBuffer.PostStoredBeanProxyTaskProcessor"
                          autowire="byType">
                        <constructor-arg name="target" ref="asynBufferService"></constructor-arg>
                        <constructor-arg name="methodName" value="sortingReturnTaskProcess"></constructor-arg>
                    </bean>
                </entry>


                <!-- 分拣-->
                <entry key="${jmq.task.topic.sorting.dms}">
                    <bean class="com.jd.bluedragon.core.jmq.asynBuffer.PostStoredBeanProxyTaskProcessor"
                          autowire="byType">
                        <constructor-arg name="target" ref="asynBufferService"></constructor-arg>
                        <constructor-arg name="methodName" value="sortingTaskProcess"></constructor-arg>
                    </bean>
                </entry>


                <!-- 称重信息回传运单中心 -->
                <entry key="${jmq.task.topic.weight.dms}">
                    <bean class="com.jd.bluedragon.core.jmq.asynBuffer.PostStoredBeanProxyTaskProcessor"
                          autowire="byType">
                        <constructor-arg name="target" ref="asynBufferService"></constructor-arg>
                        <constructor-arg name="methodName" value="weightTaskProcess"></constructor-arg>
                    </bean>
                </entry>


                <!-- 逆向备件库 -->
                <entry key="${jmq.task.topic.reverse.spare.dms}">
                    <bean class="com.jd.bluedragon.core.jmq.asynBuffer.PostStoredBeanProxyTaskProcessor"
                          autowire="byType">
                        <constructor-arg name="target" ref="reverseSpareService"></constructor-arg>
                        <constructor-arg name="methodName" value="doReverseSpareTask"></constructor-arg>
                    </bean>
                </entry>

                <!-- 运单状态-验货 -->
                <entry key="${jmq.task.topic.waybill.status.inspection.dms}">
                    <bean class="com.jd.bluedragon.core.jmq.asynBuffer.PostStoredBeanProxyTaskProcessor"
                          autowire="byType">
                        <constructor-arg name="target">
                            <bean class="com.jd.bluedragon.distribution.waybill.service.WaybillServiceImpl"/>
                        </constructor-arg>
                        <constructor-arg name="methodName" value="doWaybillStatusTask"></constructor-arg>
                    </bean>
                </entry>



                <!-- 运单状态-分拣 -->
                <entry key="${jmq.task.topic.waybill.status.sorting.dms}">
                    <bean class="com.jd.bluedragon.core.jmq.asynBuffer.PostStoredBeanProxyTaskProcessor"
                          autowire="byType">
                        <constructor-arg name="target">
                            <bean class="com.jd.bluedragon.distribution.waybill.service.WaybillServiceImpl"/>
                        </constructor-arg>
                        <constructor-arg name="methodName" value="doWaybillStatusTask"></constructor-arg>
                    </bean>
                </entry>




                <!-- 运单状态-逆向验货 -->
                <entry key="${jmq.task.topic.waybill.status.reverse.inspection.dms}">
                    <bean class="com.jd.bluedragon.core.jmq.asynBuffer.PostStoredBeanProxyTaskProcessor"
                          autowire="byType">
                        <constructor-arg name="target">
                            <bean class="com.jd.bluedragon.distribution.waybill.service.WaybillServiceImpl"/>
                        </constructor-arg>
                        <constructor-arg name="methodName" value="doWaybillStatusTask"></constructor-arg>
                    </bean>
                </entry>


                <!-- 运单状态-逆向分拣 -->
                <entry key="${jmq.task.topic.waybill.status.reverse.sorting.dms}">
                    <bean class="com.jd.bluedragon.core.jmq.asynBuffer.PostStoredBeanProxyTaskProcessor"
                          autowire="byType">
                        <constructor-arg name="target">
                            <bean class="com.jd.bluedragon.distribution.waybill.service.WaybillServiceImpl"/>
                        </constructor-arg>
                        <constructor-arg name="methodName" value="doWaybillStatusTask"></constructor-arg>
                    </bean>
                </entry>

                <!-- 运单状态-分拣退货 -->
                <entry key="${jmq.task.topic.waybill.status.sorting.return.dms}">
                    <bean class="com.jd.bluedragon.core.jmq.asynBuffer.PostStoredBeanProxyTaskProcessor"
                          autowire="byType">
                        <constructor-arg name="target">
                            <bean class="com.jd.bluedragon.distribution.waybill.service.WaybillServiceImpl"/>
                        </constructor-arg>
                        <constructor-arg name="methodName" value="doWaybillStatusTask"></constructor-arg>
                    </bean>
                </entry>

                <!-- 运单状态-三方验货 -->
                <entry key="${jmq.task.topic.waybill.status.third.inspection.dms}">
                    <bean class="com.jd.bluedragon.core.jmq.asynBuffer.PostStoredBeanProxyTaskProcessor"
                          autowire="byType">
                        <constructor-arg name="target">
                            <bean class="com.jd.bluedragon.distribution.waybill.service.WaybillServiceImpl"/>
                        </constructor-arg>
                        <constructor-arg name="methodName" value="doWaybillStatusTask"></constructor-arg>
                    </bean>
                </entry>

                <!-- 运单状态-发货 -->
                <entry key="${jmq.task.topic.waybill.status.delivery.dms}">
                    <bean class="com.jd.bluedragon.core.jmq.asynBuffer.PostStoredBeanProxyTaskProcessor"
                          autowire="byType">
                        <constructor-arg name="target">
                            <bean class="com.jd.bluedragon.distribution.waybill.service.WaybillServiceImpl"/>
                        </constructor-arg>
                        <constructor-arg name="methodName" value="doWaybillStatusTask"></constructor-arg>
                    </bean>
                </entry>


                <!-- 运单状态-售后备件库 -->
                <entry key="${jmq.task.topic.waybill.status.aftersale.spare.dms}">
                    <bean class="com.jd.bluedragon.core.jmq.asynBuffer.PostStoredBeanProxyTaskProcessor"
                          autowire="byType">
                        <constructor-arg name="target">
                            <bean class="com.jd.bluedragon.distribution.waybill.service.WaybillServiceImpl"/>
                        </constructor-arg>
                        <constructor-arg name="methodName" value="doWaybillStatusTask"></constructor-arg>
                    </bean>
                </entry>


                <!-- 运单状态-妥投 -->
                <entry key="${jmq.task.topic.waybill.status.done.dms}">
                    <bean class="com.jd.bluedragon.core.jmq.asynBuffer.PostStoredBeanProxyTaskProcessor"
                          autowire="byType">
                        <constructor-arg name="target">
                            <bean class="com.jd.bluedragon.distribution.waybill.service.WaybillServiceImpl"/>
                        </constructor-arg>
                        <constructor-arg name="methodName" value="doWaybillStatusTask"></constructor-arg>
                    </bean>
                </entry>

                <!-- 运单全程跟踪-6666 -->
                <entry key="${jmq.task.topic.waybill.track.dms}">
                    <bean class="com.jd.bluedragon.core.jmq.asynBuffer.PostStoredBeanProxyTaskProcessor"
                          autowire="byType">
                        <constructor-arg name="target">
                            <bean class="com.jd.bluedragon.distribution.waybill.service.WaybillServiceImpl"/>
                        </constructor-arg>
                        <constructor-arg name="methodName" value="doWaybillTraceTask"></constructor-arg>
                    </bean>
                </entry>

                <!-- 离线任务 -->
                <entry key="${jmq.task.topic.offline.dms}">
                    <bean class="com.jd.bluedragon.core.jmq.asynBuffer.PostStoredBeanProxyTaskProcessor"
                          autowire="byType">
                        <constructor-arg name="target" ref="asynBufferService"></constructor-arg>
                        <constructor-arg name="methodName" value="offlineTaskProcess"></constructor-arg>
                    </bean>
                </entry>
                <!-- 龙门架自动发货 -->
                <entry key = "${jmq.task.topic.scannerFrame.dms}">
                    <bean class="com.jd.bluedragon.core.jmq.asynBuffer.PostStoredBeanProxyTaskProcessor"
                          autowire="byType">
                        <constructor-arg name="target" ref="asynBufferService"></constructor-arg>
                        <constructor-arg name="methodName" value="scannerFrameDispatchProcess"/>
                    </bean>
                </entry>

                <!-- 整板发货 -->
                <entry key="${jmq.task.topic.boardSend.dms}">
                    <bean class="com.jd.bluedragon.core.jmq.asynBuffer.PostStoredBeanProxyTaskProcessor"
                          autowire="byType">
                        <constructor-arg name="target" ref="deliveryService"></constructor-arg>
                        <constructor-arg name="methodName" value="doBoardDelivery"></constructor-arg>
                    </bean>
                </entry>

                <!-- 整板取消发货 -->
                <entry key="${jmq.task.topic.boardSendCancel.dms}">
                    <bean class="com.jd.bluedragon.core.jmq.asynBuffer.PostStoredBeanProxyTaskProcessor"
                          autowire="byType">
                        <constructor-arg name="target" ref="deliveryService"></constructor-arg>
                        <constructor-arg name="methodName" value="doBoardDeliveryCancel"></constructor-arg>
                    </bean>
                </entry>

                <!-- 同步青流箱状态 -->
                <entry key="${jmq.task.topic.cycleBoxStatus.dms}">
                    <bean class="com.jd.bluedragon.core.jmq.asynBuffer.PostStoredBeanProxyTaskProcessor"
                          autowire="byType">
                        <constructor-arg name="target" ref="cycleBoxService"></constructor-arg>
                        <constructor-arg name="methodName" value="pushCycleBoxStatus"></constructor-arg>
                    </bean>
                </entry>
            </map>
        </constructor-arg>
    </bean>


</beans>